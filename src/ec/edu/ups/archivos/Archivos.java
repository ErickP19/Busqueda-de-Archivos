/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ec.edu.ups.archivos;

import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author erics
 */
public class Archivos extends javax.swing.JFrame {
    
    
    DefaultListModel carpetas;
    DefaultListModel archiv;
    DefaultListModel ocultos;
     
    
    
    /**
     * Creates new form Archivos
     */
    public Archivos() {
        initComponents();
        this.setTitle("Busqueda de Archivos");
        
        setLocationRelativeTo(null);

        carpetas = new DefaultListModel<>();
        listacarpetas.setModel(carpetas);

        archiv = new DefaultListModel<>();
        listaarchivos.setModel(archiv);

        ocultos = new DefaultListModel<>();
        listaocultos.setModel(ocultos);
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonbuscar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        fecham = new javax.swing.JLabel();
        rutaa = new javax.swing.JLabel();
        tamaño1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtruta = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        listacarpetas = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaarchivos = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaocultos = new javax.swing.JList<>();
        botonregresar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        botonbuscar.setFont(new java.awt.Font("Elephant", 1, 18)); // NOI18N
        botonbuscar.setText("Buscar");
        botonbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonbuscarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        fecham.setFont(new java.awt.Font("Serif", 2, 18)); // NOI18N
        fecham.setText("Fecha de Modificacion:");

        rutaa.setFont(new java.awt.Font("Serif", 2, 18)); // NOI18N
        rutaa.setText("Ruta Absoluta:");

        tamaño1.setFont(new java.awt.Font("Serif", 2, 18)); // NOI18N
        tamaño1.setText("Tamaño (KB):");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fecham)
                    .addComponent(rutaa)
                    .addComponent(tamaño1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fecham)
                .addGap(11, 11, 11)
                .addComponent(rutaa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tamaño1)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Serif", 2, 24)); // NOI18N
        jLabel1.setText("Busqueda de Archivos");

        jLabel2.setFont(new java.awt.Font("Serif", 2, 18)); // NOI18N
        jLabel2.setText("Ruta:");

        txtruta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtrutaActionPerformed(evt);
            }
        });

        listacarpetas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Directorios", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Serif", 2, 18))); // NOI18N
        listacarpetas.setFont(new java.awt.Font("Serif", 2, 18)); // NOI18N
        listacarpetas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listacarpetasMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                listacarpetasMouseEntered(evt);
            }
        });
        listacarpetas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listacarpetasValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listacarpetas);

        listaarchivos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Archivos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Serif", 2, 18))); // NOI18N
        listaarchivos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaarchivosValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listaarchivos);

        listaocultos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ocultos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Serif", 2, 18))); // NOI18N
        listaocultos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaocultosValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listaocultos);

        botonregresar.setFont(new java.awt.Font("Elephant", 1, 18)); // NOI18N
        botonregresar.setText("Regresar");
        botonregresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonregresarActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivos");

        jMenuItem1.setText("Crear  Archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Renombrar Archivo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Crear Carpeta");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Eliminar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(282, 282, 282))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(txtruta, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonbuscar)
                .addGap(18, 18, 18)
                .addComponent(botonregresar)
                .addGap(136, 136, 136))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtruta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonbuscar)
                    .addComponent(botonregresar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonbuscarActionPerformed

        // TODO add your handling code here:
        
      vaciarTabla();
        File direccion;
        direccion = new File(txtruta.getText().trim());
        File[] archivos = direccion.listFiles();

        //.trim elimina espacios tanto de derecha como izquierda
        if ("".equals(txtruta.getText().trim())) {
            JOptionPane.showConfirmDialog(null, "Esta URL no existe");
        } else {
            for (File archivo : archivos) {
                if (archivo.isDirectory()) {
                    if (archivo.isHidden()) {
                        //Ocultos
                        String lista = archivo.getName();
                        ocultos.addElement(lista);
                    } else {
                        //Carpetas
                        String lista = archivo.getName();
                        carpetas.addElement(lista);
                    }

                } else if (archivo.isFile()) {

                    if (archivo.isHidden()) {
                        //Oculto
                        String lista = archivo.getName();
                        ocultos.addElement(lista);
                    } else {
                        //Archivos
                        String lista = archivo.getName();
                        archiv.addElement(lista);
                    }
                }
            }
        }
    }//GEN-LAST:event_botonbuscarActionPerformed
     public void vaciarTabla() {
        
        DefaultListModel listModel = (DefaultListModel)  listacarpetas.getModel();
        listModel.removeAllElements();
        DefaultListModel listModel2 = (DefaultListModel) listaarchivos.getModel();
        listModel2.removeAllElements();
        DefaultListModel listModel3 = (DefaultListModel) listaocultos.getModel();
        listModel3.removeAllElements();
    }
    
    private void txtrutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtrutaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtrutaActionPerformed

    private void listacarpetasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listacarpetasValueChanged
        // TODO add your handling code here:
         String elementoSeleccionado = (String) listacarpetas.getSelectedValue();
        String rutaSeleccionada = txtruta.getText().trim() + "\\" + elementoSeleccionado;
        mostrarinformacion(elementoSeleccionado);

        listaarchivos.clearSelection();
        listaocultos.clearSelection();


    }//GEN-LAST:event_listacarpetasValueChanged

    private void listaarchivosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaarchivosValueChanged
        // TODO add your handling code here:
        String elementoseleccionado = (String) listaarchivos.getSelectedValue();
        //  System.out.println("Elemento: "+ elementoseleccionado);
        String rutasele = txtruta.getText().trim() + "\\" + elementoseleccionado;
        // System.out.println("Ruta elemento Seleccionado: "+ rutasele);
        //Conseguir la fecha de ultima actualizacion
        File archivoSelecc = new File(rutasele);
        long modificacion = archivoSelecc.lastModified();
        Date modiDate = new Date(modificacion);
        SimpleDateFormat fechamodificacion = new SimpleDateFormat("dd/MM/yyyy");
        String fecha = fechamodificacion.format(modiDate);
        fecham.setText("Fecha modificacion: " + fecha);
        rutaa.setText("Ruta Abosulta: " + rutasele);

        //Tamaño en kb
        long tamaño = archivoSelecc.length();
        long tamañofinal = tamaño / 1024;
        tamaño1.setText("Tamaño: " + tamañofinal + " KB");
    }//GEN-LAST:event_listaarchivosValueChanged

    private void listaocultosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaocultosValueChanged
        // TODO add your handling code here:
        String elementoseleccionado = (String) listaocultos.getSelectedValue();
        // System.out.println("Elemento: "+ elementoseleccionado);
        String rutasele = txtruta.getText().trim() + "\\" + elementoseleccionado;
        // System.out.println("Ruta elemento Seleccionado: "+ rutasele);

        //Conseguir la fecha de ultima actualizacion
        File archivoSelecc = new File(rutasele);
        long modificacion = archivoSelecc.lastModified();
        Date modiDate = new Date(modificacion);
        SimpleDateFormat fechamodificacion = new SimpleDateFormat("dd/MM/yyyy");
        String fecha = fechamodificacion.format(modiDate);
        fecham.setText("Fecha modificacion: " + fecha);
        rutaa.setText("Ruta Abosulta: " + rutasele);
        //Tamaño del archivo
        long tamaño = archivoSelecc.length();
        long tamañofinal = tamaño / 1024;
        tamaño1.setText("Tamaño: " + tamañofinal + " KB");
    }//GEN-LAST:event_listaocultosValueChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
         String nombre = JOptionPane.showInputDialog("Ingrese el nombre del archivo");
        String url = txtruta.getText().trim() + "\\" + nombre;
        File nuevo = new File(url);
        String carpetaseleccionado = null;
        if (!listacarpetas.isSelectionEmpty()) {
            carpetaseleccionado = (String) listacarpetas.getSelectedValue();
            String url2 = txtruta.getText().trim() + "\\" + carpetaseleccionado + "\\" + nombre;
            File nuevo2 = new File(url2);

            try {
                nuevo2.createNewFile();
                JOptionPane.showMessageDialog(this, "El archivo ha sido creado en la direccion: \n" + url);
            } catch (IOException error) {
                JOptionPane.showConfirmDialog(this, "El archivo no pudo ser creado: " + error.toString());

            }

        } else {
            if (!nuevo.exists()) {
                try {
                    nuevo.createNewFile();
                    JOptionPane.showMessageDialog(this, "El archivo ha sido creado en la direccion: \n" + url);
                } catch (IOException error) {
                    JOptionPane.showConfirmDialog(this, "El archivo no pudo ser creado: " + error.toString());

                }
            }

        }
        actualizar();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        String archivoSeleccionado = null;
        if (!listaarchivos.isSelectionEmpty()) {
            archivoSeleccionado = (String) listaarchivos.getSelectedValue();
        } else if (!listacarpetas.isSelectionEmpty()) {
            archivoSeleccionado = (String) listacarpetas.getSelectedValue();
        } else if (listaocultos.isSelectionEmpty()) {
            archivoSeleccionado = (String) listaocultos.getSelectedValue();
        }
        String urlArchivoSeleccinado = txtruta.getText().trim() + "\\" + archivoSeleccionado;
        File archivonuevo = new File(urlArchivoSeleccinado);

        String nombrenuevo = JOptionPane.showInputDialog("Ingrese el nuevo nombre del archivo");
        String urlNuevoArchivo = txtruta.getText().trim() + "\\" + nombrenuevo;

        File archivorenombrado = new File(urlNuevoArchivo);

        if (archivorenombrado.exists()) {
            JOptionPane.showMessageDialog(this, "Ya existe un archivo con ese nombre");
        } else {
            archivonuevo.renameTo(archivorenombrado);

        }
        actualizar();
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    public void vaciarLista() {

        DefaultListModel lisDir = (DefaultListModel) listacarpetas.getModel();
        lisDir.removeAllElements();

        DefaultListModel lisArc = (DefaultListModel) listaarchivos.getModel();
        lisArc.removeAllElements();

        DefaultListModel lisOcu = (DefaultListModel) listaocultos.getModel();
        lisOcu.removeAllElements();

    }
    
    
    
    public void actualizar(){
         vaciarTabla();
        File direccion;
        direccion = new File(txtruta.getText().trim());
        File[] archivos = direccion.listFiles();

        //.trim elimina espacios tanto de derecha como izquierda
        if ("".equals(txtruta.getText().trim())) {
            JOptionPane.showConfirmDialog(null, "Esta URL no existe");
        } else {
            for (File archivo : archivos) {
                if (archivo.isDirectory()) {
                    if (archivo.isHidden()) {
                        //Ocultos
                        String lista = archivo.getName();
                        ocultos.addElement(lista);
                    } else {
                        //Carpetas
                        String lista = archivo.getName();
                        carpetas.addElement(lista);
                    }

                } else if (archivo.isFile()) {

                    if (archivo.isHidden()) {
                        //Oculto
                        String lista = archivo.getName();
                        ocultos.addElement(lista);
                    } else {
                        //Archivos
                        String lista = archivo.getName();
                        archiv.addElement(lista);
                    }
                }
            }
        }
        
    }
     public void borrar(File archivoSeleccionado) {
        if (archivoSeleccionado.isDirectory()) {
            try {
                for (File listFile : archivoSeleccionado.listFiles()) {
                    if (listFile.isFile()) {
                        listFile.delete();
                    } else if (listFile.isDirectory()) {
                        borrar(listFile);
                        listFile.delete();
                        listFile.deleteOnExit();
                    }
                }
            } catch (NullPointerException error) {
                JOptionPane.showMessageDialog(this, "No se puede eliminar directamente esta carpeta \n " + error);
            }
        }

        archivoSeleccionado.delete();
        archivoSeleccionado.deleteOnExit();
    }

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
          String nombreCarpeta = JOptionPane.showInputDialog("Ingrese el nombre de la carpeta");
        String url = txtruta.getText().trim() + "\\" + nombreCarpeta;
        File nuevacarpeta = new File(url);
        if (!nuevacarpeta.exists()) {
            nuevacarpeta.mkdir();
            JOptionPane.showMessageDialog(this, "La carpeta ha sido creada");
        } else {
            JOptionPane.showMessageDialog(this, "La carpeta no pudo ser creada");
        }
        actualizar();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
       String archivoSeleccionado = null;
        boolean isvalid = true;
        if (!listaarchivos.isSelectionEmpty()) {
            archivoSeleccionado = (String) listaarchivos.getSelectedValue();
        } else if (!listacarpetas.isSelectionEmpty()) {
            archivoSeleccionado = (String) listacarpetas.getSelectedValue();
        } else if (listaocultos.isSelectionEmpty()) {
            archivoSeleccionado = (String) listaocultos.getSelectedValue();
        } else {
            isvalid = false;
            JOptionPane.showMessageDialog(this, "No ha seleccionado un archivo para eliminar");
        }
        if (isvalid) {
            String urlArchivoSeleccinado = txtruta.getText().trim() + "\\" + archivoSeleccionado;
            File archivonuevo = new File(urlArchivoSeleccinado);
            JOptionPane.showMessageDialog(this, "Se ha eliminado el documento: \n" + archivonuevo);

            archivonuevo.delete();

        }

        actualizar();
        
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void listacarpetasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listacarpetasMouseClicked
         listaeCarpetasMouseClicked(evt);
    }//GEN-LAST:event_listacarpetasMouseClicked

    private void listacarpetasMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listacarpetasMouseEntered
        // TODO add your handling code here:
        
    }//GEN-LAST:event_listacarpetasMouseEntered

    private void botonregresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonregresarActionPerformed
        // TODO add your handling code here:
         String direccion = txtruta.getText().trim();
        String regresar = null;
        for (int i = direccion.length() - 2; i > 2; i--) {
            if ((int) direccion.charAt(i) == 92) {
                regresar = direccion.substring(0, i);
                txtruta.setText(regresar);
                botonbuscarActionPerformed(evt);
                break;
            }
        }
    }//GEN-LAST:event_botonregresarActionPerformed
      
    private void listaeCarpetasMouseClicked (java.awt.event.MouseEvent evt){
        
       String carpetaSeleccionada = (String) listacarpetas.getSelectedValue();

        String elementoSelec = (String) listacarpetas.getSelectedValue();
        String rutaSelec = txtruta.getText().trim() + "\\" + carpetaSeleccionada;
        File archivoSelec1 = new File(rutaSelec);
        String rutaA = archivoSelec1.getAbsolutePath();

        JList list = (JList) evt.getSource();
        if (evt.getClickCount() == 2) {
            int index = list.locationToIndex(evt.getPoint());
            txtruta.setText(rutaA);
            System.out.println("index: " + index);

            actualizar();
        }
    }
    
    public void mostrarinformacion(String elementoSeleccionado) {

        // System.out.println("Elemento: "+ elementoseleccionado);
        String rutasele = txtruta.getText().trim() + "\\" + elementoSeleccionado;

        //System.out.println("Ruta elemento Seleccionado: "+ rutasele);
        //Conseguir la fecha de ultima actualizacion
        File archivoSelecc = new File(rutasele);
        long modificacion = archivoSelecc.lastModified();
        Date modiDate = new Date(modificacion);
        SimpleDateFormat fechamodificacion = new SimpleDateFormat("dd/MM/yyyy");
        String fecha = fechamodificacion.format(modiDate);
        fecham.setText("Fecha modificacion: " + fecha);

        //Ruta Absoluta
        rutaa.setText("Ruta Abosulta: " + rutasele);
        //Tamaño en bytes
        long tamaño = archivoSelecc.length();
        long tamañofinal = tamaño / 1024;
        tamaño1.setText("Tamaño: " + tamañofinal + " KB");

    }
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Archivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Archivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Archivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Archivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Archivos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonbuscar;
    private javax.swing.JButton botonregresar;
    private javax.swing.JLabel fecham;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listaarchivos;
    private javax.swing.JList<String> listacarpetas;
    private javax.swing.JList<String> listaocultos;
    private javax.swing.JLabel rutaa;
    private javax.swing.JLabel tamaño1;
    private javax.swing.JTextField txtruta;
    // End of variables declaration//GEN-END:variables
}
